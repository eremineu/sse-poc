/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SseImport } from './routes/sse'
import { Route as PaginationImport } from './routes/pagination'
import { Route as MainImport } from './routes/main'

// Create/Update Routes

const SseRoute = SseImport.update({
  id: '/sse',
  path: '/sse',
  getParentRoute: () => rootRoute,
} as any)

const PaginationRoute = PaginationImport.update({
  id: '/pagination',
  path: '/pagination',
  getParentRoute: () => rootRoute,
} as any)

const MainRoute = MainImport.update({
  id: '/main',
  path: '/main',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/main': {
      id: '/main'
      path: '/main'
      fullPath: '/main'
      preLoaderRoute: typeof MainImport
      parentRoute: typeof rootRoute
    }
    '/pagination': {
      id: '/pagination'
      path: '/pagination'
      fullPath: '/pagination'
      preLoaderRoute: typeof PaginationImport
      parentRoute: typeof rootRoute
    }
    '/sse': {
      id: '/sse'
      path: '/sse'
      fullPath: '/sse'
      preLoaderRoute: typeof SseImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/main': typeof MainRoute
  '/pagination': typeof PaginationRoute
  '/sse': typeof SseRoute
}

export interface FileRoutesByTo {
  '/main': typeof MainRoute
  '/pagination': typeof PaginationRoute
  '/sse': typeof SseRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/main': typeof MainRoute
  '/pagination': typeof PaginationRoute
  '/sse': typeof SseRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/main' | '/pagination' | '/sse'
  fileRoutesByTo: FileRoutesByTo
  to: '/main' | '/pagination' | '/sse'
  id: '__root__' | '/main' | '/pagination' | '/sse'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  MainRoute: typeof MainRoute
  PaginationRoute: typeof PaginationRoute
  SseRoute: typeof SseRoute
}

const rootRouteChildren: RootRouteChildren = {
  MainRoute: MainRoute,
  PaginationRoute: PaginationRoute,
  SseRoute: SseRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/main",
        "/pagination",
        "/sse"
      ]
    },
    "/main": {
      "filePath": "main.tsx"
    },
    "/pagination": {
      "filePath": "pagination.tsx"
    },
    "/sse": {
      "filePath": "sse.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
